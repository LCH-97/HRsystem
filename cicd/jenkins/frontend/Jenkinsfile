pipeline {
    agent any
    stages {
        // 1. 깃 클론
        stage('git clone') {
            steps {
                git branch: 'main', url: 'https://github.com/jiieunn2/be02-fin-Hello_R_loha-HRsystem'
            }
        }

        // 2. 프로젝트에 필요한 패키지 설치
        stage('Install Dependencies') {
            steps {
                script {
                    dir('frontend') {
                        sh 'npm install'
                    }
                }
            }
        }
        // 3. 기존에 생성되어 있는 dist 폴더 삭제
        stage('Delete Exist file') {
            steps {
                script {
                    sh 'rm -rf frontend/dist'
                }
            }
        }
        // 4. 새로운 프로젝트 빌드
        stage('Build') {
            steps {
                script {
                    dir('frontend') {
                        sh 'npm run build'
                    }
                }
            }
        }
        // 5. Docker 빌드
        stage('Docker Build') {
            steps {
                script {
                    dir('frontend') {
                        sh 'docker build --tag kje12/hrf:1.$BUILD_NUMBER -f Dockerfile .'
                    }
                }
            }
            //  post {
            //     // Docker 빌드 성공 시 슬랙 채널 ( #테스트 ) 로 성공 알림 발송
            //     success {
            //         slackSend(
            //             channel: '#테스트',
            //             color: 'good',
            //             message: "Docker image kje12/hrf:1.${BUILD_NUMBER} build success.",
            //             teamDomain: 'jenkins-alert-hq',
            //             tokenCredentialId: 'slack-jenkins-token')
            //     }
            //     // Docker 빌드 실패 시 슬랙 채널 ( #테스트 ) 로 실패 알림 발송
            //     failure {
            //         slackSend(
            //             channel: '#테스트',
            //             color: 'danger',
            //             message: "Docker image kje12/hrf:1.${BUILD_NUMBER} build failed.",
            //             teamDomain: 'jenkins-alert-hq',
            //             tokenCredentialId: 'slack-jenkins-token')
            //     }
            // }
        }
        // 6. Docker Push
        stage('Docker Push') {
            steps {
                script {
                    // Docker 로그인
                    withCredentials([usernamePassword(credentialsId: 'realFinal', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                    }
                    // Docker Push
                    sh 'docker push kje12/hrf:1.$BUILD_NUMBER'
                }
            }
            // post {
            //     // Docker Push 성공 시 슬랙 채널 ( #테스트 ) 로 성공 알림 발송
            //     success {
            //         slackSend(
            //             channel: '#테스트',
            //             color: 'good',
            //             message: "Docker image kje12/hrf:1.${BUILD_NUMBER} push success.",
            //             teamDomain: 'jenkins-alert-hq',
            //             tokenCredentialId: 'slack-jenkins-token')
            //     }
            //     // Docker Push 실패 시 슬랙 채널 ( #테스트 ) 로 실패 알림 발송
            //     failure {
            //         slackSend(
            //             channel: '#테스트',
            //             color: 'danger',
            //             message: "Docker image hyungdoyou/fe:3.${BUILD_NUMBER} push failed.",
            //             teamDomain: 'jenkins-alert-hq',
            //             tokenCredentialId: 'slack-jenkins-token')
            //     }
            // }
        }
        // 없앰
        // stage('Archive Dist') {
        //     steps {
        //         script {
        //             dir('frontend/dist') {
        //                 sh 'tar -cvf ../../dist.tar ./*'
        //             }
        //         }
        //     }
        // }

        // 7. SSH 전송
        stage('SSH transfer') {
            steps {
                script {
                    // SSH 전송 플러그인 사용
                    sshPublisher(
                        // 오류 발생 시 진행을 멈춤
                        continueOnError: false,
                        // 오류 발생 시 파이프라인을 실패시킴
                        failOnError: true,
                        // 전송자 목록
                        publishers: [
                            // SSH 전송 설명
                            sshPublisherDesc(
                                // SSH 서버 설정 이름 지정 ( master 노드 )
                                configName: "fianl",
                                // 자세한 출력 모드 활성화
                                verbose: true,
                                transfers: [
                                    sshTransfer(
                                        // 전송할 파일 지정
                                        sourceFiles: "frontend/frontend-deployment.yaml",
                                        remoteDirectory: "/root/",
                                        execCommand: '''
                                        sed -i "s/VERSION/$BUILD_NUMBER/g" /root/frontend/frontend-deployment.yaml
                                        kubectl apply -f /root/frontend/frontend-deployment.yaml
                                    '''
                                    )
                                ]
                            )
                        ]
                    )
                }
            }
        }
        // 8. 슬랙 알림
        // stage('Slack Notification') {
        //     steps {
        //         script {
        //             // 파이프라인 단계가 끝나고 슬랙으로 최종 알림 발송
        //             slackSend(channel: '#젠킨스알림', message: "Build version : ${env.BUILD_NUMBER} is finally successful!", teamDomain: 'hooks.slack.com', token: '/services/T06KN5J31HD/B06L8GV2MTL/15TDN2G6g6FfFaq1cgRqrZ5j')
        //             slackSend(
        //                 channel: '#테스트',
        //                 color: 'good',
        //                 message: "Build version : ${env.BUILD_NUMBER} is finally successful!",
        //                 teamDomain: 'jenkins-alert-hq',
        //                 tokenCredentialId: 'slack-jenkins-token'
        //                 )
        //         }
        //     }
        // }
    }
}
